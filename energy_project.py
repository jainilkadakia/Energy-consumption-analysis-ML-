# -*- coding: utf-8 -*-
"""energy project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BKkFvNrsuYtuIKAYk_JVT04p31fHUIXY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
df =pd.read_csv('/content/events (1).csv')
df

df.info()

df.describe()

dfn = df.drop(['Start time UTC','End time UTC','Start time UTC+03:00'],axis='columns')
dfn = dfn.rename(columns={'End time UTC+03:00': 'datetime', '	Electricity consumption in Finland': 'consumption'})
dfn

dataset = dfn
dataset["Month"] = pd.to_datetime(dfn['datetime']).dt.month
dataset["Year"] = pd.to_datetime(dfn['datetime']).dt.year
dataset["Date"] = pd.to_datetime(dfn['datetime']).dt.date
dataset["Time"] = pd.to_datetime(dfn['datetime']).dt.time

dataset["Day"] = pd.to_datetime(dfn['datetime']).dt.day_name()
dataset = dfn.set_index(['datetime'])
dataset.index = pd.to_datetime(dataset.index)
dataset

fig = plt.figure()
axes1 = plt.subplot2grid((1,1), (0,0))

sns.lineplot(x=dataset.Year, y=dataset["Electricity consumption in Finland"], data=dataset)

plt.title("Electricity consumption in Finland 2016-2021")
plt.xlabel("Date")
plt.ylabel("Energy in MW")
plt.grid(True)
plt.legend()
plt.figure(figsize=(15,10))
plt.plot(dataset['Electricity consumption in Finland'])

fig = plt.figure(figsize = (15,10))
sns.distplot(dataset["Electricity consumption in Finland"])
plt.title("Energy Distribution")

fig = plt.figure(figsize = (15,10))
sns.boxplot(x=dataset["Month"], y=dataset["Electricity consumption in Finland"], data= df)
plt.title("Energy Consumption VS Month")
plt.xlabel("Month")
plt.grid(True, alpha=1)
plt.legend()

fig = plt.figure(figsize = (15,10))
sns.boxplot(x=dataset["Year"], y=dataset["Electricity consumption in Finland"], data= df)
plt.title("Energy Consumption VS years")
plt.xlabel("years")
plt.grid(True, alpha=1)
plt.legend()

dataset_numeric = dataset.select_dtypes(include=['number'])
newDataSet = dataset_numeric.resample("D").mean()
newDataSet.shape
y = newDataSet["Electricity consumption in Finland"]

from sklearn.preprocessing import MinMaxScaler
scaler= MinMaxScaler(feature_range=(0,1))
y=scaler.fit_transform(np.array(y).reshape(-1, 1))

import numpy as np

total_size = len(y)
training_size = int(total_size * 0.60)
test_size = total_size - training_size
val_size = int(training_size * 0.40)
train_data = y[:training_size - val_size, :]
test_data = y[training_size:total_size, :]
val_data = y[total_size - test_size - val_size:total_size - test_size, :]

def create_dataset(dataset, time_step=1):
    dataX = [dataset[i:(i + time_step), 0] for i in range(len(dataset) - time_step - 1)]
    dataY = [dataset[i + time_step, 0] for i in range(len(dataset) - time_step - 1)]
    return np.array(dataX), np.array(dataY)

time_step = 100
X_train, y_train = create_dataset(train_data, time_step)
X_test, ytest = create_dataset(test_data, time_step)
X_val, yval = create_dataset(val_data, time_step)

yval.shape

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

model = Sequential()


model.add(LSTM(units = 50, return_sequences = True, input_shape = (time_step, 1)))
model.add(Dropout(0.2))
model.add(LSTM(units = 50, return_sequences = True))
model.add(LSTM(units = 50))


# Adding the output layer #
model.add(Dense(units = 1))

# Compiling the RNN  #
model.compile(optimizer = 'adam', loss = 'mean_squared_error')

model.summary()

history = model.fit(X_train, y_train, validation_data = (X_val,yval), verbose = 1,epochs = 60 ,batch_size = 20)

plt.figure(figsize=(10,10))
plt.plot(history.history['loss']) # tb
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()

train_predictions = model.predict(X_train)
train_predictions =scaler.inverse_transform(train_predictions)

y_train = y_train.reshape(y_train.shape[0], 1)
actual = scaler.inverse_transform(y_train)
train_results = pd.DataFrame()

train_results["Train Predictions"] = train_predictions.tolist()
train_results["Actuals"] = actual.tolist()

train_results



# Assuming y has shape (1294, 1) and actual has shape (384, 1)
y_reshaped = np.reshape(y, (-1, 1))
actual_reshaped = np.reshape(actual, (-1, 1))

plt.figure(figsize=(20,10))



ActualPlot = np.empty_like(y)
ActualPlot[:, :] = np.nan
if actual_reshaped.shape[0] == ActualPlot[887:, :].shape[0]:
    ActualPlot[887:, :] = actual_reshaped.tolist()
else:

    print("Dimensions of actual_reshaped and ActualPlot[887:, :] do not match.")
plt.plot(ActualPlot)


TrainPredictionsPlot = np.empty_like(y)
TrainPredictionsPlot[:, :] = np.nan
if train_predictions.shape[0] == TrainPredictionsPlot[887:, :].shape[0]:
    TrainPredictionsPlot[887:, :] = train_predictions.tolist()
else:

    print("Dimensions of train_predictions and TrainPredictionsPlot[887:, :] do not match.")
plt.plot(TrainPredictionsPlot)


plt.legend(['actual','train_predictions'])
plt.xlabel('Time Steps')
plt.ylabel('Consumption MWh')
plt.show()

